# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# QueryNest specific build artifacts
querynest.egg-info/
build/
*.egg-info

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# Visual Studio Code
.vscode/

# QueryNest specific files
# 配置文件（包含敏感信息）
config.local.yaml
config.production.yaml
config.development.yaml
config.test.yaml
config.yaml
*.local.yaml

# 日志文件
logs/
*.log
*.log.*

# 数据文件
data/
backup/
*.db
*.sqlite
*.sqlite3

# 临时文件
tmp/
temp/
*.tmp
*.temp

# 脚本文件
scripts/

# Claude AI 相关文件
.claude/
.promptx/
CLAUDE.md

# 缓存文件
cache/
*.cache

# 密钥和证书文件
*.key
*.pem
*.crt
*.p12
*.pfx
secrets/

# Docker相关
.dockerignore
docker-compose.override.yml
docker-compose.local.yml
docker-compose.production.yml

# 监控和指标数据
prometheus_data/
grafana_data/
metrics/

# 备份文件
*.bak
*.backup
*.old

# 操作系统相关
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# 编辑器临时文件
*~
*.swp
*.swo
*.orig

# 性能分析文件
*.prof
*.pstats

# 测试相关
.coverage
.pytest_cache/
test_results/

# 文档生成
docs/_build/
docs/build/
docs/

# 本地开发环境
.local/
local/

# 虚拟环境（额外的常见名称）
virtualenv/
pyenv/
conda/
miniconda/

# 包管理器锁文件（可选择性忽略）
# Pipfile.lock
# poetry.lock
# requirements.lock

# IDE和编辑器配置
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/extensions.json

# 项目特定的忽略文件
# QueryNest 临时和重复文件
*_complete.py
*_working.py
*_debug.py
*_minimal.py
*_simple.*

verify_*.py
simulate_*.py
check_*.py

# 启动脚本临时文件
start_mcp.py
install.py
deploy.py

# 配置文件副本
pyproject_*.toml
config_*.yaml

# 运行时生成的文件
*.pid
*.sock
nohup.out

# 数据库转储和备份
*.dump
*.bson
*.json.gz

# MCP 调试文件
mcp_debug_*.log
transport_*.log

# 性能分析和监控
*.perf
*.flame
monitoring_data/

# Semantic data and indexes
semantic_data/

# Trae IDE configuration
.trae/